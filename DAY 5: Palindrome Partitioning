// CODE IS IN C++ LANGUAGE

//Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.

A palindrome string is a string that reads the same backward as forward.


class Solution {
public:
    
    bool isPalindrome(string s) {
        int n = s.length();
        for(int i=0; i < n/2; ++i) if(s[i] != s[n - 1 - i]) return false;
        return true;
    }
    
    vector<vector<string>> partition(string s) {
        int n = s.length();
        int max = 1 << (n - 1);
        vector<vector<string>> answer;
        for(int mask=0; mask<max; ++mask) {
            
            vector<string> current;
            string temp = "";
            temp.push_back(s[0]);
            
            for(int i=0; i<n - 1; ++i) {
                if(mask & (1 << i)) {
                    temp.push_back(s[i + 1]);
                } else {
                    if(temp != "") current.push_back(temp);
                    temp = "";
                    temp.push_back(s[i + 1]);
                }
            }
            current.push_back(temp);

            bool valid = true;
            for(auto x: current) if(!isPalindrome(x)) {
                valid = false;
                break;
            } 
            if(valid) answer.push_back(current);
            
        }
        return answer;
    }
};
